{"version":3,"sources":["lazy.js"],"names":["$","xLazyLoader","method","options","defaults","js","css","img","jsKey","cssKey","imgKey","name","timeout","success","noop","error","complete","each","head","document","getElementsByTagName","s","tTimeout","cssTimeout","toLoad","self","this","loaded","errors","files","load","type","url","status","push","checkProgress","Date","getTime","dispatchCallbacks","clearTimeout","length","addError","src","init","extend","f","split","concat","setTimeout","handled","i","file","inArray","urls","isArray","callback","key","$script","attr","bind","createElement","setAttribute","onerror","removeAttr","unbind","done","onload","onreadystatechange","readyState","test","trigger","appendChild","href","link","browser","msie","opera","hostname","location","replace","exec","mozilla","sheet","cssRules","e","arguments","callee","Image","disable","enable","destroy","remove","t_jp"],"mappings":"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","sourcesContent":["/*\n * xLazyLoader 1.5 - Plugin for jQuery\n * \n * Load js, css and images asynchron and get different callbacks\n *\n * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)\n * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.\n *\n * Depends:\n *   jquery.js\n *\n *  Copyright (c) 2010 Oleg Slobodskoi (jsui.de)\n */\n\n;(function($){\n\n$.xLazyLoader =  function ( method, options ) {\n    if ( typeof method == 'object' ) {\n        options = method;\n        method = 'init';\n    };\n    new xLazyLoader()[method](options);\n};\n\n$.xLazyLoader.defaults = {\n    js: [], css: [], img: [],\n    jsKey: null, cssKey: null, imgKey: null,\n    name: null,\n    timeout: 20000,\n    //success callback for all files\n    success: $.noop, \n    //error callback - by load errors / timeout\n    error: $.noop,\n    //complete callbck - by success or errors\n    complete: $.noop,\n    //success callback for each file\n    each: $.noop \n};\n\nvar head = document.getElementsByTagName(\"head\")[0];\n\nfunction xLazyLoader ()\n{\n\n    var self = this,\n        s,\n        loaded = [],\n        errors = [],\n        tTimeout,\n        cssTimeout,\n        toLoad,\n        files = []\n    ;\n    \n    this.init = function ( options )\n    {\n        if ( !options ) return;\n        \n        s = $.extend({}, $.xLazyLoader.defaults, options);\n        toLoad = {js: s.js, css: s.css, img: s.img};\n        \n        $.each(toLoad, function( type, f ){\n            if ( typeof f == 'string' )        \n                f = f.split(',');\n            files = files.concat(f);    \n        });\n\n        if ( !files.length ) {\n            dispatchCallbacks('error');\n            return;    \n        };\n\n        if (s.timeout) {\n            tTimeout = setTimeout(function(){\n                var handled = loaded.concat(errors);\n                /* search for unhandled files */\n                $.each(files, function(i, file){\n                    $.inArray(file, handled) == -1 && errors.push(file);        \n                });\n                dispatchCallbacks('error');            \n            }, s.timeout);\n        };\n\n\n        $.each(toLoad, function(type, urls){\n            if ( $.isArray(urls) )\n                $.each( urls, function(i, url){\n                    load(type, url);\n                });\n            else if (typeof urls == 'string')\n                load(type, urls);\n        });\n        \n\n\n    };\n\n    this.js = function ( src, callback, name, key )\n    {\n        var $script = $('script[src*=\"'+src+'\"]');\n        if ( $script.length ) {\n            $script.attr('pending') ? $script.bind('scriptload',callback) : callback();\n            return;\n        };\n        \n        var s = document.createElement('script');\n        s.setAttribute(\"type\",\"text/javascript\");\n        s.setAttribute('charset', 'UTF-8');\n        s.setAttribute(\"src\", src + key);\n        s.setAttribute('id', name);\n        s.setAttribute('pending', 1);\n        // Mozilla only\n        s.onerror = addError;\n        \n        \n        $(s).bind('scriptload',function(){\n            $(this).removeAttr('pending');\n            callback();\n             //unbind load event\n             //timeout because of pending callbacks\n            setTimeout(function(){\n                $(s).unbind('scriptload');\n            },10);\n        });\n        \n        // jQuery doesn't handles onload event special for script tag,\n        var done = false;\n        s.onload = s.onreadystatechange = function() {\n            if ( !done && ( !this.readyState || /loaded|complete/.test(this.readyState) ) ) {\n                done = true;\n                // Handle memory leak in IE\n                s.onload = s.onreadystatechange = null;\n                $(s).trigger('scriptload'); \n            };\n        };\n        head.appendChild(s);\n    \n    };\n\n    this.css = function ( href, callback, name, key )\n    {\n\n        if ( $('link[href*=\"'+href+'\"]').length ) {\n            callback();\n            return;\n        };\n        \n\n        var link = $('<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"'+ href + key + '\" id=\"'+name+'\"></link>')[0];\n        if ( $.browser.msie ) {\n            link.onreadystatechange = function () {\n                /loaded|complete/.test(link.readyState) && callback();\n            };\n        } else if ( $.browser.opera ) {\n            link.onload = callback;\n        } else {\n            /* \n             * Mozilla, Safari, Chrome \n             * unfortunately it is inpossible to check if the stylesheet is really loaded or it is \"HTTP/1.0 400 Bad Request\"\n             * the only way to do this is to check if some special properties  were set, so there is no error callback for stylesheets -\n             * it fires alway success\n             * \n             * There is also no access to sheet properties by crossdomain stylesheets, \n             * so we fire callback immediately\n             */\n            \n            var hostname = location.hostname.replace('www.',''),\n                hrefHostname = /http:/.test(href) ? /^(\\w+:)?\\/\\/([^\\/?#]+)/.exec( href )[2] : hostname;\n            hostname != hrefHostname && $.browser.mozilla ?  \n                callback()\n                :  \n                //stylesheet is from the same domain or it is not firefox\n                (function(){\n                    try {\n                        link.sheet.cssRules;\n                    } catch (e) {\n                        cssTimeout = setTimeout(arguments.callee, 20);\n                        return;\n                    };\n                    callback();\n                })();\n        };\n\n                \n        head.appendChild(link);\n    };\n    \n    this.img = function ( src, callback, name, key )\n    {\n        var img = new Image();\n        img.onload = callback;\n        img.onerror = addError;\n        img.src = src + key;\n    };\n    \n    /* It works only for css */\n    this.disable = function ( name )\n    {    \n        $('#lazy-loaded-'+name, head).attr('disabled', 'disabled');\n    };\n\n    /* It works only for css */\n    this.enable = function ( name )\n    {    \n        $('#lazy-loaded-'+name, head).removeAttr('disabled');\n    };\n    \n    /*\n     * By removing js tag, script ist still living in browser memory,\n     * css will be really destroyed\n     */\n    this.destroy = function ( name )\n    {\n        $('#lazy-loaded-'+name, head).remove();    \n    };\n    \n    function load ( type, url ) {\n        self[type](url, function(status) { \n            status == 'error' ? errors.push(url) : loaded.push(url) && s.each(url);\n            checkProgress();\n        }, 'lazy-loaded-'+ (s.name ? s.name : new Date().getTime()), s[type+'Key'] ? '?key='+s[type+'Key'] : '' );\n    };\n    \n    function dispatchCallbacks ( status ) {\n        s.complete(status, loaded, errors);\n        s[status]( status=='error' ? errors : loaded);\n        clearTimeout(tTimeout);\n        clearTimeout(cssTimeout);\n    };\n    \n    function checkProgress () {\n        if (loaded.length == files.length) dispatchCallbacks('success')\n        else if (loaded.length+errors.length == files.length) dispatchCallbacks('error');\n    };\n    \n    function addError () {\n        errors.push(this.src);    \n        checkProgress();\n    };\n\n};\n\n})(t_jp.$);"]}