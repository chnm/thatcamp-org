{"version":3,"sources":["backendtranslate.js"],"names":["$","timer","items","translations","tokens","langs","sources","pair_count","curr_pair","ajax_translate_me","token","translation","lang","source","trim","text","progressbar","data","clearTimeout","push","setTimeout","i","action","ajax","type","url","t_jp","ajaxurl","success","error","do_invoker","batchtokens","batchtrans","currlang","preferred","some","engine","t_be","indexOf","trans","dat","result","responseStatus","undefined","responseData","translatedText","each","this","binglang","dbt","TranslatedText","dgpt","results","dyt","dut","translate_post","postid","str","name","val","to_trans","strings","batchlength","dataType","post","cache","json","html","posttitle","length","p","l","value","unescape","splice","window","jQuery"],"mappings":"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","sourcesContent":["/*  Copyright Â© 2009-2018 Transposh Team (website : http://transposh.org)\n *\n *\tThis program is free software; you can redistribute it and/or modify\n *\tit under the terms of the GNU General Public License as published by\n *\tthe Free Software Foundation; either version 2 of the License, or\n *\t(at your option) any later version.\n *\n *\tThis program is distributed in the hope that it will be useful,\n *\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n *\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *\tGNU General Public License for more details.\n *\n *\tYou should have received a copy of the GNU General Public License\n *\talong with this program; if not, write to the Free Software\n *\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n/*global Date, Math, alert, escape, clearTimeout, document, jQuery, setTimeout, t_jp, t_be, window */\n(function ($) { // closure\n\n    var timer;\n    var items = 0;\n    var translations = [];\n    var tokens = [];\n    var langs = [];\n    var sources = [];\n    var BATCH_SIZE = 512;\n    var pair_count = 0;\n    var curr_pair = 0;\n\n    // move the progress bar a bit\n    function make_progress(translation, lang) {\n        curr_pair += 1;\n        $(\"#progress_bar\").progressbar('value', curr_pair / pair_count * 100);\n        $('#p').text('(' + lang + ') ' + translation);\n        if (curr_pair === pair_count) {\n            $(\"#tr_loading\").data(\"done\", true);\n        }\n    }\n\n    // batch items for posting to server.. nice touch added for different sources for same batch...\n    function ajax_translate_me(token, translation, lang, source) {\n        translation = $(\"<div>\" + $.trim(translation) + \"</div>\").text(); // fix some char bugs\n        make_progress(translation, lang);\n        // we aggregate translations together, 200ms from the last translation we will send the timer\n        // so here we remove it so nothing unexpected happens\n        clearTimeout(timer);\n        items += 1;\n        // push translations - we'll assume something is different...\n        tokens.push(token);\n        translations.push(translation);\n        langs.push(lang);\n        sources.push(source);\n        timer = setTimeout(function () {\n            var data = {\n                action: 'tp_translation',\n                items: items\n            }, i;\n            // this is the \"smart\" stuff, only coding changed info\n            for (i = 0; i < items; i += 1) {\n                if (tokens[i] !== tokens[i - 1]) {\n                    data[\"tk\" + i] = tokens[i];\n                }\n                if (langs[i] !== langs[i - 1]) {\n                    data[\"ln\" + i] = langs[i];\n                }\n                if (translations[i] !== translations[i - 1]) {\n                    data[\"tr\" + i] = translations[i];\n                }\n                if (sources[i] !== sources[i - 1]) {\n                    data[\"sr\" + i] = sources[i];\n                }\n            }\n            $.ajax({\n                type: \"POST\",\n                url: t_jp.ajaxurl, // FIX ALL!\n                data: data,\n                success: function () {\n                },\n                error: function () {\n                }\n            });\n            // as we posted, we can come clean (TODO - future test of results)\n            items = 0;\n            translations = [];\n            tokens = [];\n            langs = [];\n            sources = [];\n        }, 200); // wait 200 ms...\n    }\n\n    // and the invoker\n    function do_mass_bing_invoker(tokens, trans, lang) {\n        var binglang = lang;\n        // fix this in ms mass...\n        if (binglang === 'zh') {\n            binglang = 'zh-chs';\n        } else if (binglang === 'zh-tw') {\n            binglang = 'zh-cht';\n        }\n        t_jp.dbt(trans, function (result) {\n            $(result).each(function (i) {\n                ajax_translate_me(tokens[i], this.TranslatedText, lang, 2); // notice the source\n            });\n        }, binglang);\n    }\n\n    function do_mass_apertium_invoker(tokens, trans, lang) {\n        t_jp.dat(trans, function (result) {\n            // we assume that 2xx answer should be good, 200 is good, 206 is partially good (some errors)\n            if (result.responseStatus >= 200 && result.responseStatus < 300) {\n                // single items get handled differently\n                if (result.responseData.translatedText !== undefined) {\n                    ajax_translate_me(tokens[0], result.responseData.translatedText);\n                } else {\n                    $(result.responseData).each(function (i) {\n                        if (this.responseStatus === 200) {\n                            ajax_translate_me(tokens[i], this.responseData.translatedText, lang, 3);\n                        }\n                    });\n                }\n            }\n        }, lang);\n    }\n\n    function do_mass_google_invoker(tokens, trans, lang) {\n        t_jp.dgpt(trans, function (result) {\n            $(result.results).each(function (i) {\n                ajax_translate_me(tokens[i], this, lang, 1);\n            });\n        }, lang);\n    }\n\n    function do_mass_yandex_invoker(tokens, trans, lang) {\n        t_jp.dyt(trans, function (result) {\n            $(result.results).each(function (i) {\n                ajax_translate_me(tokens[i], this, lang, 4);\n            });\n        }, lang);\n    }\n\n    function do_mass_baidu_invoker(tokens, trans, lang) {\n        t_jp.dut(trans, function (result) {\n            $(result.results).each(function (i) {\n                ajax_translate_me(tokens[i], this, lang, 4);\n            });\n        }, lang);\n    }\n\n    function do_invoker(batchtokens, batchtrans, currlang) {\n        t_jp.preferred.some(function (engine) {\n            if (t_be[engine + '_langs'].indexOf(currlang) !== -1) {\n                if (engine === 'a') {\n                    do_mass_apertium_invoker(batchtokens, batchtrans, currlang);\n                }\n                if (engine === 'b') {\n                    do_mass_bing_invoker(batchtokens, batchtrans, currlang);\n                }\n                if (engine === 'g') {\n                    do_mass_google_invoker(batchtokens, batchtrans, currlang);\n                }\n                if (engine === 'y') {\n                    do_mass_yandex_invoker(batchtokens, batchtrans, currlang);\n                }\n                if (engine === 'u') {\n                    do_mass_baidu_invoker(batchtokens, batchtrans, currlang);\n                }\n                return true;\n            }\n        });\n    }\n\n    // the main translate function\n    function translate_post(postid) {\n        var currlang = '',\n                tokens = [],\n                strings = [],\n                str, name, val,\n                batchlength = 0,\n                batchtrans = [],\n                batchtokens = [],\n                to_trans;\n\n        $(\"#tr_loading\").data(\"done\", false);\n        // get the post // FIX\n        $.ajax({\n            url: ajaxurl,\n            dataType: 'json',\n            data: {\n                action: \"tp_post_phrases\",\n                post: postid\n            },\n            cache: false,\n            success: function (json) {\n                // if we got no results than seems like we have nothing to translate\n                $(\"#tr_translate_title\").html(\"Translating post: \" + json.posttitle);\n                if (json.length === undefined) {\n                    $(\"#tr_loading\").html('Nothing left to translate');\n                    $(\"#tr_loading\").data(\"done\", true);\n                    return;\n                }\n                // calculate # of pairs\n                pair_count = 0;\n                curr_pair = 0;\n                for (name in json.p) {\n                    pair_count += json.p[name].l.length;\n                }\n\n                // create progress bars\n                $(\"#tr_loading\").html('<br/>Translation: <span id=\"p\"></span><div id=\"progress_bar\"/>');\n                $(\"#progress_bar\").progressbar({\n                    value: 0\n                });\n\n                // per language passing...\n                for (var lang in json.langs) {\n                    currlang = json.langs[lang];\n                    strings = [];\n                    tokens = [];\n                    for (name in json.p) {\n                        val = json.p[name];\n                        // we have a winner\n                        if (val.l.indexOf(currlang) !== -1) {\n                            // add to candidates\n                            strings.push(unescape(name));\n                            tokens.push(unescape(name));\n                            val.l.splice(val.l.indexOf(currlang), 1);\n                            // if no more languages, we can remove the item from further processing\n                            if (val.l.length === 0) {\n                                json.length -= 1;\n                                delete json.p[name];\n                            }\n                        }\n                    }\n                    if (strings.length) {\n                        for (str in strings) {\n                            to_trans = strings[str];\n                            if (batchlength + to_trans.length > BATCH_SIZE) {\n                                do_invoker(batchtokens, batchtrans, currlang);\n                                batchlength = 0;\n                                batchtrans = [];\n                                batchtokens = [];\n                            }\n                            batchlength += to_trans.length;\n                            batchtokens.push(tokens[str]);\n                            batchtrans.push(to_trans);\n                        }\n\n                        // this invokation is for the remaining items\n                        do_invoker(batchtokens, batchtrans, currlang);\n                    }\n                }\n\n            }\n        });\n    }\n    // TODO - just expose this one, not the entire set of items\n    window.translate_post = translate_post;\n\n    // If we have a single post, we can just go through with it\n    $(function () {\n        if (t_be.post) {\n            translate_post(t_be.post);\n        }\n    });\n}(jQuery)); // end of closure"]}